_type: export
__export_format: 4
__export_date: 2025-03-15T04:08:45.584Z
__export_source: insomnia.desktop.app:v10.3.1
resources:
  - _id: req_51393970259b43ebae421e16153b7b83
    parentId: fld_f987dff136f247f484f02efa7016555f
    modified: 1740373893685
    created: 1740367921550
    url: "{{BaseUrl}}/api/login/"
    name: Login com e-mail inválido e senha válida
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "mail": "{{InvalidMail}}",
          "password": "{{PasswordAdm}}"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1740367921550
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test("Status code is 400", () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Check response message', () => {
      	insomnia.expect('E-mail ou senha informados são inválidos.').to.equal(insomnia.response.json().alert);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_f987dff136f247f484f02efa7016555f
    parentId: fld_ce24787bc62c40d5a4314e0bdcd34264
    modified: 1740367862875
    created: 1740367862875
    name: Login de acesso
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367862876
    environmentType: kv
    _type: request_group
  - _id: fld_ce24787bc62c40d5a4314e0bdcd34264
    parentId: wrk_1c417c13210e42d1b4da6345a53e6534
    modified: 1740378957315
    created: 1740367594888
    name: "[Tadeu] - Quality Eagles"
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367593459
    preRequestScript: ""
    afterResponseScript: ""
    authentication: {}
    _type: request_group
  - _id: wrk_1c417c13210e42d1b4da6345a53e6534
    parentId: null
    modified: 1742004769948
    created: 1742004769948
    name: Tadeu-QualityEagles-Collection
    description: ""
    scope: collection
    _type: workspace
  - _id: req_8f7bd2dcb4414aa8be06e2e564c2652e
    parentId: fld_f987dff136f247f484f02efa7016555f
    modified: 1740415321364
    created: 1740368450439
    url: "{{BaseUrl}}/api/login/"
    name: "[BUG 20792 / Carol] Login com e-mail válido e senha em branco"
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "mail": "{{MailAdm}}",
          "password": ""
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    preRequestScript:  >-
      insomnia.execution.skipRequest()
    metaSortKey: -1740367757503.5
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test("Status code is 400", () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate response password message', () => {
      	insomnia.expect('O campo senha é obrigatório.').to.equal(insomnia.response.json().password);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_76f8ad384ede4f94b856634f5c1e142e
    parentId: fld_f987dff136f247f484f02efa7016555f
    modified: 1740416000352
    created: 1740369309177
    url: "{{BaseUrl}}/api/login/"
    name: "[BUG 21093 / Iza] Login com email em branco e senha em branco"
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "mail": "",
          "password": ""
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    preRequestScript: insomnia.execution.skipRequest()
    metaSortKey: -1740367675480.25
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test("Status code is 400", () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate response mail message', () => {
      	insomnia.expect('O campo e-mail é obrigatório.').to.equal(insomnia.response.json().mail);
      });


      insomnia.test('Validate response password message', () => {
      	insomnia.expect('O campo senha é obrigatório.').to.equal(insomnia.response.json().password);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_736e0ba719974df2b63186b08156a194
    parentId: fld_f987dff136f247f484f02efa7016555f
    modified: 1740374045323
    created: 1740370366064
    url: "{{BaseUrl}}/api/login/"
    name: Login com email invalido e senha invalida
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "mail": "{{InvalidMail}}",
          "password": "{{InvalidPassword}}"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1740367634468.625
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test("Status code is 400", () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate invalid data message', () => {
      	insomnia.expect('E-mail ou senha informados são inválidos.').to.equal(insomnia.response.json().alert);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_f72fcc64d83342a6bfc6f07ed9544e80
    parentId: fld_f987dff136f247f484f02efa7016555f
    modified: 1740374059935
    created: 1740370558154
    url: "{{BaseUrl}}/api/login/"
    name: Login com email valido e senha incorreta
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "mail": "{{MailAdm}}",
          "password": "{{InvalidPassword}}"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1740367613962.8125
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test("Status code is 400", () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate invalid data message', () => {
      	insomnia.expect('E-mail ou senha informados são inválidos.').to.equal(insomnia.response.json().alert);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_bd0035c421614e47b2076bcedceab822
    parentId: fld_f987dff136f247f484f02efa7016555f
    modified: 1742010760745
    created: 1740370663781
    url: "{{BaseUrl}}/api/login/"
    name: Login de acesso com sucesso
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "mail": "{{MailAdm}}",
          "password": "{{PasswordAdm}}"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1740367603709.9062
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test("Status code is 200", () => {
          insomnia.response.to.have.status(200);
      });


      insomnia.test('Validate invalid data message', () => {
      	insomnia.expect(insomnia.response.json().msg).contains("autenticação autorizada com sucesso");
      });


      insomnia.test('Validate response contains token', () => {
          insomnia.expect(insomnia.response.json()).to.have.property('token');
      });


      insomnia.environment.set("TokenAdm", insomnia.response.json().token);
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_f2eefc8d007941eab1b089209f7326b3
    parentId: fld_596266a3029d474fb62f443558d46482
    modified: 1742011000909
    created: 1740371770978
    url: "{{BaseUrl}}/api/user/"
    name: "[BUG 21142 / Cleisson] Registrar usuário com sucesso"
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "fullName": "{{FullName}}",
          "mail": "{{MailUser}}",
          "accessProfile": "ADMIN",
          "cpf": "{{Cpf}}",
          "password": "{{PasswordUser}}",
          "confirmPassword": "{{PasswordUser}}"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenAdm}}"
      addTo: header
      disabled: false
    preRequestScript: >-
      // insomnia.execution.skipRequest()


      // Function to generate a random 11-digit number

      function generateRandom11DigitNumber() {
          // Generate a random number between 0 and 10^11 - 1
          let randomNumber = Math.floor(Math.random() * 1e11);

          // Ensure that the number has 11 digits by padding with leading zeros if necessary
          return String(randomNumber).padStart(11, '0');
      }


      // Generate the random number

      let random11DigitNumber = generateRandom11DigitNumber();


      // Set the number as an environment variable

      insomnia.environment.set("Cpf", random11DigitNumber);


      ////////////////////////////////////////////////////////////////


      function generateRandomLastname() {
          // List of sample lastnames; you can customize this list with more options
          const lastnames = [
              "Smith", "Johnson", "Williams", "Jones", "Brown",
              "Davis", "Miller", "Wilson", "Moore", "Taylor",
              "Anderson", "Thomas", "Jackson", "White", "Harris",
              "Martin", "Thompson", "Garcia", "Martinez", "Robinson"
          ];

          // Select a random lastname from the list
          let randomLastname = lastnames[Math.floor(Math.random() * lastnames.length)];

          // Ensure the first letter is capitalized
          return randomLastname.charAt(0).toUpperCase() + randomLastname.slice(1).toLowerCase();
      }


      // Generate the random lastname

      let randomLastname = generateRandomLastname();


      // Set the lastname as an environment variable

      insomnia.environment.set("LastName", randomLastname);


      // Log the lastname to the console for verification

      console.log("Generated Random Last name:", randomLastname);


      // Function to generate a random first name

      function generateRandomFirstName() {
          // List of sample first names; you can customize this list with more options
          const firstNames = [
              "James", "Mary", "John", "Patricia", "Robert",
              "Jennifer", "Michael", "Linda", "William", "Elizabeth",
              "David", "Barbara", "Richard", "Susan", "Joseph",
              "Jessica", "Thomas", "Sarah", "Charles", "Karen"
          ];

          // Select a random first name from the list
          let randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];

          // Ensure the first letter is capitalized
          return randomFirstName.charAt(0).toUpperCase() + randomFirstName.slice(1).toLowerCase();
      }


      // Generate the random first name

      let randomFirstName = generateRandomFirstName();


      // Set the first name as an environment variable

      insomnia.environment.set("FirstName", randomFirstName);


      // Log the first name to the console for verification

      console.log("Generated Random First Name:", randomFirstName);


      insomnia.environment.set("FullName", insomnia.environment.get("FirstName") + " " + insomnia.environment.get("LastName"));

      insomnia.environment.set("MailUser", insomnia.environment.get('FullName').toLowerCase().replace(/\s/g, "").normalize("NFD").replace(/[\u0300-\u036f]/g, "") + '@qacoders.com.br');

      //////////////////////////////////////////////////////////////


      function generatePassword() {

          const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%";

          const comprimentoMinimo = 8;

          const comprimentoMaximo = 12;

          let senhaArray = [];

       

          senhaArray.push(chars[Math.floor(Math.random() * 26)]); 

          senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); 

          senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); 

          senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); 

          

          const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);

          

          for (let i = 0; i < comprimentoRestante; i++) {

              senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);

          }

          return shuffleString(senhaArray.join(""));

      }


      function shuffleString(string) {

        return string.split("").sort(() => Math.random() - 0.5).join("");

      }


      insomnia.environment.set("PasswordUser", generatePassword());
    metaSortKey: -1740371778433
    isPrivate: false
    afterResponseScript: >
      insomnia.test('Status code is 201', () => {

          insomnia.response.to.have.status(201);

      });


      insomnia.test('Validate name', () => {
          insomnia.expect(insomnia.response.json().user).to.have.property('fullName');
      });


      insomnia.test('Validate mail', () => {
          insomnia.expect(insomnia.response.json().user).to.have.property('mail');
      });


      insomnia.environment.set('IdUser', insomnia.response.json().user._id);

      insomnia.environment.set('MailUser', insomnia.response.json().user.mail);
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_596266a3029d474fb62f443558d46482
    parentId: fld_ce24787bc62c40d5a4314e0bdcd34264
    modified: 1740371184444
    created: 1740371141219
    name: Novo Cadastro de Usuário
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367728167
    environmentType: kv
    _type: request_group
  - _id: req_dcf4bda6e97b4e91a455fcb8f34e8a27
    parentId: fld_596266a3029d474fb62f443558d46482
    modified: 1742005884469
    created: 1740373817775
    url: "{{BaseUrl}}/api/user/"
    name: Registar usuário com email inválido
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "fullName": "{{FullName}}",
          "mail": "{{InvalidMail}}",
          "accessProfile": "ADMIN",
          "cpf": "{{Cpf}}",
          "password": "{{PasswordUser}}",
          "confirmPassword": "{{PasswordUser}}"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenAdm}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740369849991.5
    isPrivate: false
    afterResponseScript: >
      insomnia.test("Status code is 400", () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate invalid email', () => {
      	insomnia.expect('O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].').to.equal(insomnia.response.json().error[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_8d96d260819f4f4e928cb1b15192f89d
    parentId: fld_596266a3029d474fb62f443558d46482
    modified: 1740374511170
    created: 1740374443495
    url: "{{BaseUrl}}/api/user/"
    name: Registrar Usuário com CPF em branco
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "fullName": "{{FullName}}",
          "mail": "{{MailUser}}",
          "accessProfile": "ADMIN",
          "cpf": "",
          "password": "{{PasswordUser}}",
          "confirmPassword": "{{PasswordUser}}"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenAdm}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740369849891.5
    isPrivate: false
    afterResponseScript: >
      insomnia.test("Status code is 400", () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate invalid email', () => {
      	insomnia.expect('O campo CPF é obrigatório!').to.equal(insomnia.response.json().error[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_3d2f1a6ab2b24b4d84800c46cda4b61c
    parentId: fld_596266a3029d474fb62f443558d46482
    modified: 1742010787813
    created: 1740375746630
    url: "{{BaseUrl}}/api/login/"
    name: Login de acesso com sucesso (user)
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "mail": "{{MailUser}}",
          "password": "{{PasswordUser}}"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1740369849791.5
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test("Status code is 200", () => {
          insomnia.response.to.have.status(200);
      });


      insomnia.test('Validate invalid data message', () => {
      	insomnia.expect(insomnia.response.json().msg).contains("autenticação autorizada com sucesso");
      });


      insomnia.test('Validate response contains token', () => {
          insomnia.expect(insomnia.response.json()).to.have.property('token');
      });


      insomnia.environment.set("TokenUser", insomnia.response.json().token);
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_8dd79a68e9044ff4a05cf119fef542ef
    parentId: fld_dd8988e56054491d95cd58d05a90929c
    modified: 1742008282912
    created: 1740375513152
    url: "{{BaseUrl}}/api/user/count"
    name: Contagem de usuário com sucesso
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740375521821
    isPrivate: false
    afterResponseScript: "insomnia.test(\"Status code is 200\", function () {\r

      \    insomnia.response.to.have.status(200);\r

      });\r

      \r

      insomnia.test('Verify property cont exist', () => {\r

      \    insomnia.expect(insomnia.response.json().count).to.exist;\r

      });"
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_dd8988e56054491d95cd58d05a90929c
    parentId: fld_ce24787bc62c40d5a4314e0bdcd34264
    modified: 1740375192298
    created: 1740375178073
    name: Lista de Cadastro de Usuários
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367660812.5
    environmentType: kv
    _type: request_group
  - _id: req_7ea3a05ffb9a422aa2277c5482a33dd0
    parentId: fld_dd8988e56054491d95cd58d05a90929c
    modified: 1740376080349
    created: 1740375875230
    url: "{{BaseUrl}}/api/user/count"
    name: Contagem de usuários com o token inválido
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: "{{InvalidToken}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740373650127
    isPrivate: false
    afterResponseScript: >
      insomnia.test("Status code is 403", function () {
          insomnia.response.to.have.status(403);
      });


      insomnia.test('Verify property count not exist', () => {
          insomnia.expect(insomnia.response.json().count).not.to.exist;
      });


      insomnia.test('Validate invalid token', () => {
      	insomnia.expect('Failed to authenticate token.').to.equal(insomnia.response.json().errors[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_3e832fbb3816412888443f8ee4448501
    parentId: fld_dd8988e56054491d95cd58d05a90929c
    modified: 1740376138707
    created: 1740376105862
    url: "{{BaseUrl}}/api/user/count"
    name: Contagem de usuários sem token
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: "{{InvalidToken}}"
      addTo: header
      disabled: true
    preRequestScript: ""
    metaSortKey: -1740372714280
    isPrivate: false
    afterResponseScript: >
      insomnia.test("Status code is 403", function () {
          insomnia.response.to.have.status(403);
      });


      insomnia.test('Verify property count not exist', () => {
          insomnia.expect(insomnia.response.json().count).not.to.exist;
      });


      insomnia.test('Validate no token provided', () => {
      	insomnia.expect('No token provided.').to.equal(insomnia.response.json().errors[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_8ecf864cea7045b38f306ee754d51f45
    parentId: fld_dd8988e56054491d95cd58d05a90929c
    modified: 1740376497564
    created: 1740376199727
    url: "{{BaseUrl}}/api/user/{{IdUser}}"
    name: Listar Usuário por ID acesso negado
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: ""
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740372246356.5
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test("Status code is 403", function () {
          insomnia.response.to.have.status(403);
      });


      insomnia.test('Validate empty token', () => {
      	insomnia.expect('No token provided.').to.equal(insomnia.response.json().errors[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_6427556dfc8441ba90210afb4dfda7be
    parentId: fld_dd8988e56054491d95cd58d05a90929c
    modified: 1742006317121
    created: 1740376265450
    url: "{{BaseUrl}}/api/user/{{IdUser}}"
    name: Listar usuário por ID com sucesso
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740372012394.75
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test("Status code is 200", function () {
          insomnia.response.to.have.status(200);
      });


      insomnia.test('Validate user id matches', () => {
      	insomnia.expect(insomnia.environment.get("IdUser")).to.equal(insomnia.response.json()._id);
      });


      insomnia.test('Validate user mail matches', () => {
      	insomnia.expect(insomnia.environment.get("MailUser")).to.equal(insomnia.response.json().mail);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_c02d83c1b60a40159c5aa96e14be923a
    parentId: fld_dd8988e56054491d95cd58d05a90929c
    modified: 1740377027115
    created: 1740376785493
    url: "{{BaseUrl}}/api/user/{{InvalidIdUser}}"
    name: Listar Usuário por ID não encontrado
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740371953904.3125
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test("Status code is 404", function () {
          insomnia.response.to.have.status(404);
      });


      insomnia.test('Validate invalid data message', () => {
      	insomnia.expect('Esse usuário não existe em nossa base de dados.').to.equal(insomnia.response.json().alert[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_693bc64509634a309eb19c989ffd0275
    parentId: fld_dd8988e56054491d95cd58d05a90929c
    modified: 1742009110391
    created: 1740376537705
    url: "{{BaseUrl}}/api/user"
    name: Listar usuários com sucesso
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740371895413.875
    isPrivate: false
    pathParameters: []
    afterResponseScript: |
      insomnia.test("Status code is 200", function () {
          insomnia.response.to.have.status(200);
      });

      // insomnia.test('Validate response contains an array list', () => {
      // 	insomnia.expect(Array.isArray(insomnia.response.json())).to.be.true;
      // });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_0fb31d5d2f32437697dde04fe98da908
    parentId: fld_fa3d5102124446979a5c4b5956dd9410
    modified: 1740378214218
    created: 1740377357226
    url: "{{BaseUrl}}/api/user/status/{{IdUser}}"
    name: Editar status por id do usuário para false
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: "{\r\n  \"status\": false\r\n}"
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenAdm}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740377363820
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test('Status code is 200', () => {
          insomnia.response.to.have.status(200);
      });


      insomnia.test('Validate response message', () => {
          insomnia.expect('Status do usuario atualizado com sucesso para status false.').to.be.equal(insomnia.response.json().msg);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_fa3d5102124446979a5c4b5956dd9410
    parentId: fld_ce24787bc62c40d5a4314e0bdcd34264
    modified: 1740377140361
    created: 1740377104765
    name: Editar Cadastro de Usuário
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367627135.25
    environmentType: kv
    _type: request_group
  - _id: req_0b743ff0171a4258a48a8d3c7d16f4b5
    parentId: fld_fa3d5102124446979a5c4b5956dd9410
    modified: 1740378209679
    created: 1740377660048
    url: "{{BaseUrl}}/api/user/status/{{IdUser}}"
    name: Editar status por id do usuário para true
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
          "status": true
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenAdm}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740376442820.5
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test('Status code is 200', () => {
          insomnia.response.to.have.status(200);
      });


      insomnia.test('Validate response message', () => {
          insomnia.expect('Status do usuario atualizado com sucesso para status true.').to.be.equal(insomnia.response.json().msg);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_09a539c2f9d5461280666cbda378f240
    parentId: fld_fa3d5102124446979a5c4b5956dd9410
    modified: 1740378204095
    created: 1740377709318
    url: "{{BaseUrl}}/api/user/status/{{IdUser}}"
    name: Editar status por id do usuário para undefined
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: ""
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenAdm}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740375982320.75
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test('Status code is 200', () => {
          insomnia.response.to.have.status(200);
      });


      insomnia.test('Validate response message', () => {
          insomnia.expect('Status do usuario atualizado com sucesso para status undefined.').to.be.equal(insomnia.response.json().msg);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_564394f167d942ffb7dbc79df080dc7d
    parentId: fld_fa3d5102124446979a5c4b5956dd9410
    modified: 1740378199374
    created: 1740377802025
    url: "{{BaseUrl}}/api/user/{{IdUser}}"
    name: Editar usuário por Id com fullName em branco
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
        	"fullName": "",
        	"mail": "{{MailUser}}" 
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740375752070.875
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test('Status code is 400', () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate response message', () => {
          insomnia.expect('O campo nome completo é obrigatório.').to.be.equal(insomnia.response.json().error[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_918081756a5545e8b9856400b899ed4b
    parentId: fld_fa3d5102124446979a5c4b5956dd9410
    modified: 1740378194236
    created: 1740377983948
    url: "{{BaseUrl}}/api/user/{{IdUser}}"
    name: Editar usuário por Id com mail inválido
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
        	"fullName": "{{FullName}}",
        	"mail": "{{InvalidMail}}"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740375636945.9375
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test('Status code is 400', () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate response message', () => {
          insomnia.expect('O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].').to.be.equal(insomnia.response.json().error[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_0e5ed03544cf4af18b610a2e613ef0df
    parentId: fld_fa3d5102124446979a5c4b5956dd9410
    modified: 1740378187647
    created: 1740378113691
    url: "{{BaseUrl}}/api/user/{{IdUser}}"
    name: Editar usuário por Id com sucesso
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
        	"fullName": "{{FullName}}",
        	"mail": "{{MailUser}}"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740375579383.4688
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test('Status code is 200', () => {
          insomnia.response.to.have.status(200);
      });


      insomnia.test('Validate response message', () => {
          insomnia.expect('Dados atualizados com sucesso!').to.be.equal(insomnia.response.json().msg);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_f452969c95d84139921765ae52fc1330
    parentId: fld_bbea4da97d0d4c98ae020090afac1c0d
    modified: 1740378335415
    created: 1740378259929
    url: "{{BaseUrl}}/api/user/{{IdUser}}"
    name: Excluir Cadastro de Usuário com Sucesso
    description: ""
    method: DELETE
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenAdm}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740378268226
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test('Status code is 200', () => {
          insomnia.response.to.have.status(200);
      });


      insomnia.test('Validate user deletion', () => {
          insomnia.expect(insomnia.response.json().msg).to.equal('Usuário deletado com sucesso!.')
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_bbea4da97d0d4c98ae020090afac1c0d
    parentId: fld_ce24787bc62c40d5a4314e0bdcd34264
    modified: 1740377167056
    created: 1740377162642
    name: Excluir Cadastro de Usuário
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367610296.625
    environmentType: kv
    _type: request_group
  - _id: req_5ec48405e8ec4e7cba93f2e06cc0c720
    parentId: fld_bbea4da97d0d4c98ae020090afac1c0d
    modified: 1740378566031
    created: 1740378385839
    url: "{{BaseUrl}}/api/user/{{InvalidIdUser}}"
    name: Excluir Cadastro de Usuário inexistente
    description: ""
    method: DELETE
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenAdm}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740378268126
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test('status code is 400', () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate user deletion', () => {
          insomnia.expect(insomnia.response.json().alert[0]).to.equal('Esse usuário não existe em nossa base de dados.')
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_f242b6b4f6b3463290d0fe1d38189df7
    parentId: fld_bbea4da97d0d4c98ae020090afac1c0d
    modified: 1740378680883
    created: 1740378598847
    url: "{{BaseUrl}}/api/user/{{IdUser}}"
    name: Excluir Cadastro de Usuário sem autorização
    description: ""
    method: DELETE
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenAdm}}"
      addTo: header
      disabled: true
    preRequestScript: ""
    metaSortKey: -1740378268026
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test('Status code is 403', () => {
          insomnia.response.to.have.status(403);
      });


      insomnia.test('Validate no token provided', () => {
          insomnia.expect(insomnia.response.json().errors[0]).to.equal('No token provided.')
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_453e9895e2b4408983d3b6bf36908846
    parentId: fld_11a72af58ea04709bc164f9bfdcf8f23
    modified: 1740416040138
    created: 1740379533181
    url: "{{BaseUrl}}/api/company"
    name: "[BUG 21425 / Lucas] Nome da Empresa - Campo obrigatório"
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "corporateName": "",
          "registerCompany": "{{Cnpj}}",
          "mail": "test@test.com",
          "matriz": "Teste",
          "responsibleContact": "Marcio",
          "telephone": "99999999999999",
          "serviceDescription": "Testes",
          "address": [
            {
              "zipCode": "04777001",
              "city": "São Paulo",
              "state": "SP",
              "district": "Rua das Flores",
              "street": "Avenida Interlagos",
              "number": "50",
              "complement": "de 4503 ao fim - lado ímpar",
              "country": "Brasil"
            }
          ]
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      disabled: false
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
    preRequestScript: >-
      insomnia.execution.skipRequest()


      // Function to generate a random 14-digit number

      function generateRandomDigitNumber() {
          // Generate a random number between 0 and 10^11 - 1
          let randomNumber = Math.floor(Math.random() * 1e14);

          // Ensure that the number has 11 digits by padding with leading zeros if necessary
          return String(randomNumber).padStart(14, '0');
      }


      // Generate the random number

      let randomDigitNumber = generateRandomDigitNumber();


      // Set the number as an environment variable

      insomnia.environment.set("Cnpj", randomDigitNumber);


      ////////////////////////////////////////////////////////////////
    metaSortKey: -1740379533181
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test("Status code is 400", () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate error message', () => {
      	insomnia.expect('O campo \'Nome da empresa\' da empresa é obrigatório').to.equal(insomnia.response.json().error[0]);
      });

    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_11a72af58ea04709bc164f9bfdcf8f23
    parentId: fld_ce24787bc62c40d5a4314e0bdcd34264
    modified: 1740378750025
    created: 1740378732377
    name: Novo Cadastro de Empresa
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367601877.3125
    environmentType: kv
    _type: request_group
  - _id: req_b165243b07184c77b5e1510a8196d617
    parentId: fld_11a72af58ea04709bc164f9bfdcf8f23
    modified: 1740380827281
    created: 1740380142030
    url: "{{BaseUrl}}/api/company"
    name: Nome da empresa - Nome com 101 caracteres
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "corporateName": "{{TooLongString}}",
          "registerCompany": "{{Cnpj}}",
          "mail": "test@test.com",
          "matriz": "Teste",
          "responsibleContact": "Marcio",
          "telephone": "99999999999999",
          "serviceDescription": "Testes",
          "address": [
            {
              "zipCode": "04777001",
              "city": "São Paulo",
              "state": "SP",
              "district": "Rua das Flores",
              "street": "Avenida Interlagos",
              "number": "50",
              "complement": "de 4503 ao fim - lado ímpar",
              "country": "Brasil"
            }
          ]
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      disabled: false
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
    preRequestScript: >-
      // Função para gerar uma string aleatória de um comprimento específico

      function generateRandomString(length) {
          const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
          let result = '';
          for (let i = 0; i < length; i++) {
              const randomIndex = Math.floor(Math.random() * characters.length);
              result += characters.charAt(randomIndex);
          }
          return result;
      }


      // Gerar a string de 101 caracteres

      let randomString101 = generateRandomString(101);


      // Configurar a string como uma variável de ambiente

      insomnia.environment.set("TooLongString", randomString101);


      // Log da string para verificação

      console.log("Generated 101-character String:", randomString101);


      ////////////////////////////////////////////////////////////////
    metaSortKey: -1740378900703.5
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test("Status code is 400", () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate corporate name is more than 100 characteres', () => {
      	insomnia.expect('O campo \'Nome da empresa\' deve ter no máximo 100 caracteres.').to.equal(insomnia.response.json().error[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_317757c7c67040a9b60cfb141563317a
    parentId: fld_11a72af58ea04709bc164f9bfdcf8f23
    modified: 1742011503527
    created: 1740380628925
    url: "{{BaseUrl}}/api/company"
    name: Novo Cadastro de Empresa
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "corporateName": "test",
          "registerCompany": "{{Cnpj}}",
          "mail": "test@test.com",
          "matriz": "Teste",
          "responsibleContact": "Marcio",
          "telephone": "99999999999999",
          "serviceDescription": "Testes",
          "address": [
            {
              "zipCode": "04777001",
              "city": "São Paulo",
              "state": "SP",
              "district": "Rua das Flores",
              "street": "Avenida Interlagos",
              "number": "50",
              "complement": "de 4503 ao fim - lado ímpar",
              "country": "Brasil"
            }
          ]
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      disabled: false
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
    preRequestScript: >
      // Function to generate a random 14-digit number

      function generateRandomDigitNumber() {
          // Generate a random number between 0 and 10^11 - 1
          let randomNumber = Math.floor(Math.random() * 1e14);

          // Ensure that the number has 11 digits by padding with leading zeros if necessary
          return String(randomNumber).padStart(14, '0');
      }


      // Generate the random number

      let randomDigitNumber = generateRandomDigitNumber();


      // Set the number as an environment variable

      insomnia.environment.set("Cnpj", randomDigitNumber);


      ////////////////////////////////////////////////////////////////
    metaSortKey: -1740378742584.125
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test("Status code is 201", () => {
          insomnia.response.to.have.status(201);
      });


      insomnia.test('Validate company creation', () => {
      	insomnia.expect('Olá a companhia true foi cadastrada com sucesso.').to.equal(insomnia.response.json().msg);
      });


      insomnia.environment.set('IdCompany', insomnia.response.json().newCompany._id);
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_449a024985c346d19788721b5df9d5dd
    parentId: fld_11a72af58ea04709bc164f9bfdcf8f23
    modified: 1740380879172
    created: 1740380430801
    url: "{{BaseUrl}}/api/company"
    name: Nome da empresa - Teste de Duplicidade
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "corporateName": "test",
          "registerCompany": "{{Cnpj}}",
          "mail": "test@test.com",
          "matriz": "Teste",
          "responsibleContact": "Marcio",
          "telephone": "99999999999999",
          "serviceDescription": "Testes",
          "address": [
            {
              "zipCode": "04777001",
              "city": "São Paulo",
              "state": "SP",
              "district": "Rua das Flores",
              "street": "Avenida Interlagos",
              "number": "50",
              "complement": "de 4503 ao fim - lado ímpar",
              "country": "Brasil"
            }
          ]
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      disabled: false
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
    preRequestScript: ""
    metaSortKey: -1740378584464.75
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test("Status code is 400", () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate corporate name is empty', () => {
      	insomnia.expect('Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.').to.equal(insomnia.response.json().alert[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request


  - _id: req_0f357e69b9ef48f8a43d07ccf5c70376
    parentId: fld_571763611f8445378476d6e00a1154d3
    modified: 1740381055115
    created: 1740381024686
    url: "{{BaseUrl}}/api/company"
    name: Lista Cadastro de Empresa com sucesso
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740381044709
    isPrivate: false
    pathParameters: []
    afterResponseScript: |
      insomnia.test("Status code is 200", function () {
          insomnia.response.to.have.status(200);
      });

      insomnia.test('Validate response contains an array list', () => {
      	insomnia.expect(Array.isArray(insomnia.response.json())).to.be.true;
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_0f357e69b9ef48f8a43d07ccf5c70377
    parentId: fld_571763611f8445378476d6e00a1154d3
    modified: 1740381055116
    created: 1740381024687
    url: "{{BaseUrl}}/api/company"
    name: Lista Cadastro de Empresa com token invalido
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: "{{InvalidToken}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740381044709
    isPrivate: false
    pathParameters: []
    afterResponseScript: |
      insomnia.test("Status code is 403", function () {
          insomnia.response.to.have.status(403);
      });

      insomnia.test('Validate invalid token', () => {
        insomnia.expect('Failed to authenticate token.').to.equal(insomnia.response.json().errors[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_571763611f8445378476d6e00a1154d3
    parentId: fld_ce24787bc62c40d5a4314e0bdcd34264
    modified: 1740378774436
    created: 1740378774436
    name: Lista Cadastro de Empresa
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367597668.1562
    environmentType: kv
    _type: request_group
  - _id: req_541c2b84f89c487096c0770f084bdb73
    parentId: fld_af6e68379a5643dc9d43bd7dee1a7c18
    modified: 1740416088872
    created: 1740381168870
    url: "{{BaseUrl}}/api/company/address/{{IdCompany}}"
    name: Editar dados de Endereço da Empresa com campo nome tendo mais caracteres
      que o limite definido
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
          "corporateName": "test",
          "registerCompany": "{{Cnpj}}",
          "mail": "test@test.com",
          "matriz": "Teste",
          "responsibleContact": "Marcio",
          "telephone": "99999999999999",
          "serviceDescription": "Testes",
          "address": [
            {
              "zipCode": "04777001",
              "city": "São Paulo",
              "state": "SP",
              "district": "Rua das Flores",
              "street": "Avenida Interlagos",
              "number": "11188811199",
              "complement": "de 4503 ao fim - lado ímpar",
              "country": "Brasil"
            }
          ]
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740381177717
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test('Status code is 400', () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate corporate address number is more than 10 characteres', () => {
      	insomnia.expect('"O campo \'número\' deve possuir no máximo 10 caracteres.').contains(insomnia.response.json().error[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_af6e68379a5643dc9d43bd7dee1a7c18
    parentId: fld_ce24787bc62c40d5a4314e0bdcd34264
    modified: 1740378797733
    created: 1740378797733
    name: Editar dados de Endereço da Empresa
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367595563.5781
    environmentType: kv
    _type: request_group
  - _id: req_4b63347c20f3407cbd4346c54ac70410
    parentId: fld_af6e68379a5643dc9d43bd7dee1a7c18
    modified: 1740416095623
    created: 1740382349795
    url: "{{BaseUrl}}/api/company/address/{{IdCompany}}"
    name: Editar dados de Endereço da Empresa com campos obrigatórios em branco
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
          "corporateName": "test",
          "registerCompany": "{{Cnpj}}",
          "mail": "test@test.com",
          "matriz": "Teste",
          "responsibleContact": "Marcio",
          "telephone": "99999999999999",
          "serviceDescription": "Testes",
          "address": [
            {
              "zipCode": "",
              "city": "",
              "state": "",
              "district": "",
              "street": "",
              "number": "",
              "complement": "",
              "country": ""
            }
          ]
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740381111213
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test('Status code is 400', () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate corporate address number is more than 10 characteres', () => {
      	insomnia.expect(insomnia.response.json().error[0]).contains('O campo \'CEP\' é obrigatório.');
      	insomnia.expect(insomnia.response.json().error[1]).contains('O campo País é obrigatório.');
      	insomnia.expect(insomnia.response.json().error[2]).contains('O campo \'cidade\' é obrigatório.');
      	insomnia.expect(insomnia.response.json().error[3]).contains('O campo \'estado\' é obrigatório.');
      	insomnia.expect(insomnia.response.json().error[4]).contains('O campo \'bairro\' é obrigatório.');
      	insomnia.expect(insomnia.response.json().error[5]).contains('O campo \'logradouro\' é obrigatório.');
      	insomnia.expect(insomnia.response.json().error[6]).contains('O campo \'número\' é obrigatório.');
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_1301326913b3413fb5a38753b310d9ac
    parentId: fld_af6e68379a5643dc9d43bd7dee1a7c18
    modified: 1740416485658
    created: 1740382693560
    url: "{{BaseUrl}}/api/company/address/{{IdCompany}}"
    name: "[BUG 21338 / Ítalo] Editar dados de Endereço da Empresa com Sucesso"
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
          "corporateName": "test",
          "registerCompany": "{{Cnpj}}",
          "mail": "test@test.com",
          "matriz": "Teste",
          "responsibleContact": "Marcio",
          "telephone": "99999999999999",
          "serviceDescription": "Testes",
          "address": [
            {
              "zipCode": "{{randomZipCode}}",
              "city": "{{randomCity}}",
              "state": "{{randomState}}",
              "district": "{{randomDistrict}}",
              "street": "{{randomStreet}}",
              "number": "{{randomNumber}}",
              "complement": "{{randomAddressComplement}}",
              "country": "{{randomCountry}}"
            }
          ]
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
      disabled: false
    preRequestScript: >-
      insomnia.execution.skipRequest()


      // Function to generate a random zip code with exactly 8 digits

      function generateRandomZipCode() {
          const minValue = 10000000; // Minimum 8-digit number
          const maxValue = 99999999; // Maximum 8-digit number
          
          // Generate a random number between minValue and maxValue
          const randomZipCode = Math.floor(Math.random() * (maxValue - minValue + 1)) + minValue;
          return randomZipCode.toString();
      }


      // Generate the random zip code

      let randomZipCode = generateRandomZipCode();


      // Set the random zip code as an environment variable

      insomnia.environment.set("randomZipCode", randomZipCode);


      // Log the zip code to the console for verification

      console.log("Generated Random Zip Code:", randomZipCode);


      ////////////////////////////////////////////////////////////////////////////////////////


      // List of sample city names; you can customize this list with more options

      const cities = [
          "New York", "Los Angeles", "Chicago", "Houston", "Phoenix",
          "Philadelphia", "San Antonio", "San Diego", "Dallas", "San Jose",
          "Austin", "Jacksonville", "Fort Worth", "Columbus", "Charlotte",
          "San Francisco", "Indianapolis", "Seattle", "Denver", "Washington"
      ];


      // Function to select a random city from the list

      function getRandomCity() {
          const randomIndex = Math.floor(Math.random() * cities.length);
          return cities[randomIndex];
      }


      // Generate the random city name

      let randomCity = getRandomCity();


      // Set the random city name as an environment variable

      insomnia.environment.set("randomCity", randomCity);


      // Log the city name to the console for verification

      console.log("Generated Random City:", randomCity);


      ////////////////////////////////////////////////////////////////////////////////////////


      // List of Brazilian states by their abbreviations

      const states = [
          "AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA",
          "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN",
          "RS", "RO", "RR", "SC", "SP", "SE", "TO"
      ];


      // Function to select a random state from the list

      function getRandomState() {
          const randomIndex = Math.floor(Math.random() * states.length);
          return states[randomIndex];
      }


      // Generate the random state

      let randomState = getRandomState();


      // Set the random state as an environment variable

      insomnia.environment.set("randomState", randomState);


      // Log the state to the console for verification

      console.log("Generated Random Brazilian State:", randomState);


      ////////////////////////////////////////////////////////////////////////////////////////


      // List of sample district names; customize this list with relevant district names

      const districts = [
          "Downtown", "Uptown", "West End", "East Side", "Northfield",
          "South Park", "Old Town", "New City", "Lakeside", "Hilltop",
          "Riverbend", "Greenfield", "Meadowlands", "Brookside", "Sunnyvale"
      ];


      // Function to select a random district from the list

      function getRandomDistrict() {
          const randomIndex = Math.floor(Math.random() * districts.length);
          return districts[randomIndex];
      }


      // Generate the random district name

      let randomDistrict = getRandomDistrict();


      // Set the random district name as an environment variable

      insomnia.environment.set("randomDistrict", randomDistrict);


      // Log the district name to the console for verification

      console.log("Generated Random District:", randomDistrict);


      ////////////////////////////////////////////////////////////////////////////////////////


      // List of sample street names; you can customize this list with relevant street names

      const streets = [
          "Main Street", "High Street", "Broadway", "Maple Avenue", "Elm Street",
          "Oak Street", "Pine Street", "Cedar Avenue", "Sunset Boulevard", "Park Lane",
          "5th Avenue", "6th Avenue", "7th Avenue", "8th Avenue", "9th Avenue",
          "1st Street", "2nd Street", "3rd Street", "4th Street", "Hill Street"
      ];


      // Function to select a random street from the list

      function getRandomStreet() {
          const randomIndex = Math.floor(Math.random() * streets.length);
          return streets[randomIndex];
      }


      // Generate the random street name

      let randomStreet = getRandomStreet();


      // Set the random street name as an environment variable

      insomnia.environment.set("randomStreet", randomStreet);


      // Log the street name to the console for verification

      console.log("Generated Random Street:", randomStreet);


      ////////////////////////////////////////////////////////////////////////////////////////


      // Function to generate a random number with fewer than 10 digits

      function generateRandomNumber(maxDigits) {
          // Calculate the maximum value for the given number of digits
          const maxValue = Math.pow(10, maxDigits) - 1;
          
          // Generate a random number between 0 and maxValue
          return Math.floor(Math.random() * (maxValue + 1));
      }


      // Set the maximum number of digits (less than 10)

      const maxDigits = 9; // Change this value if you want fewer digits


      // Generate the random number

      let randomNumber = generateRandomNumber(maxDigits);


      // Set the random number as an environment variable

      insomnia.environment.set("randomNumber", randomNumber);


      // Log the random number to the console for verification

      console.log("Generated Random Number:", randomNumber);


      ////////////////////////////////////////////////////////////////////////////////////////


      // List of sample address complements; customize this list with relevant options

      const addressComplements = [
          "Apt. 101", "Suite 202", "Floor 3", "Building A", "Unit B12",
          "Penthouse", "Room 404", "Basement", "Annex", "Rear Entrance",
          "Front Desk", "Mailbox 5", "Gate 2", "Lot 15", "Tower 3",
          "Block C", "Wing East", "Section 8", "Cabin 12", "Cottage"
      ];


      // Function to select a random address complement from the list

      function getRandomAddressComplement() {
          const randomIndex = Math.floor(Math.random() * addressComplements.length);
          return addressComplements[randomIndex];
      }


      // Generate the random address complement

      let randomAddressComplement = getRandomAddressComplement();


      // Set the random address complement as an environment variable

      insomnia.environment.set("randomAddressComplement", randomAddressComplement);


      // Log the address complement to the console for verification

      console.log("Generated Random Address Complement:", randomAddressComplement);


      ////////////////////////////////////////////////////////////////////////////////////////


      // List of sample country names; you can customize this list with more options

      const countries = [
          "United States", "Canada", "Brazil", "United Kingdom", "Germany",
          "France", "Australia", "India", "China", "Japan",
          "Mexico", "Italy", "Spain", "Russia", "South Africa",
          "Argentina", "New Zealand", "Netherlands", "Sweden", "Norway"
      ];


      // Function to select a random country from the list

      function getRandomCountry() {
          const randomIndex = Math.floor(Math.random() * countries.length);
          return countries[randomIndex];
      }


      // Generate the random country name

      let randomCountry = getRandomCountry();


      // Set the random country name as an environment variable

      insomnia.environment.set("randomCountry", randomCountry);


      // Log the country name to the console for verification

      console.log("Generated Random Country:", randomCountry);
    metaSortKey: -1740381111113
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test('Status code is 200', () => {
          insomnia.response.to.have.status(200);
      });


      insomnia.test('Validate response message', () => {
      	insomnia.expect('Endereço da companhia atualizado com sucesso.').to.equal(insomnia.response.json().msg);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_3f50122af78e49928c91b7ebfb7c06ac
    parentId: fld_af6e68379a5643dc9d43bd7dee1a7c18
    modified: 1740416112888
    created: 1740383707850
    url: "{{BaseUrl}}/api/company/address/{{IdCompany}}"
    name: Editar dados de Endereço da Empresa sem informar campos obrigatórios
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
          "corporateName": "test",
          "registerCompany": "{{Cnpj}}",
          "mail": "test@test.com",
          "matriz": "Teste",
          "responsibleContact": "Marcio",
          "telephone": "99999999999999",
          "serviceDescription": "Testes",
          "address": [
            {
              "complement": ""
            }
          ]
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
      disabled: false
    preRequestScript: ""
    metaSortKey: -1740381111013
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test('Status code is 400', () => {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate corporate address number is more than 10 characteres', () => {
      	insomnia.expect(insomnia.response.json().error[0]).contains('O campo \'CEP\' é obrigatório.');
      	insomnia.expect(insomnia.response.json().error[1]).contains('O campo País é obrigatório.');
      	insomnia.expect(insomnia.response.json().error[2]).contains('O campo \'cidade\' é obrigatório.');
      	insomnia.expect(insomnia.response.json().error[3]).contains('O campo \'estado\' é obrigatório.');
      	insomnia.expect(insomnia.response.json().error[4]).contains('O campo \'bairro\' é obrigatório.');
      	insomnia.expect(insomnia.response.json().error[5]).contains('O campo \'logradouro\' é obrigatório.');
      	insomnia.expect(insomnia.response.json().error[6]).contains('O campo \'número\' é obrigatório.');
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_82b6d21649b6491da3129489a35773bd
    parentId: fld_32a912b18102454cbdad4cc4ba25ebaf
    modified: 1740386071018
    created: 1740385607011
    url: "{{BaseUrl}}/api/company/count"
    name: Count Empresas
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      disabled: false
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
    metaSortKey: -1740385607011
    isPrivate: false
    pathParameters: []
    afterResponseScript: |-
      insomnia.test("Status code is 200", function () {
          insomnia.response.to.have.status(200);
      });

      insomnia.test('Verify property cont exist', () => {
          insomnia.expect(insomnia.response.json().count).to.exist;
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_32a912b18102454cbdad4cc4ba25ebaf
    parentId: fld_ce24787bc62c40d5a4314e0bdcd34264
    modified: 1740378825338
    created: 1740378825338
    name: Contagem de Empresas
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367594511.289
    environmentType: kv
    _type: request_group
  - _id: req_0fc5a0852ec041e6b7ff94fd3c4cb715
    parentId: fld_32a912b18102454cbdad4cc4ba25ebaf
    modified: 1740386035473
    created: 1740385985219
    url: "{{BaseUrl}}/api/company/count"
    name: Sem Token de Autentificacão
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      key: Authorization
      value: "{{InvalidToken}}"
      addTo: header
      disabled: true
    preRequestScript: ""
    metaSortKey: -1740385606911
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test("Status code is 403", function () {
          insomnia.response.to.have.status(403);
      });


      insomnia.test('Verify property count not exist', () => {
          insomnia.expect(insomnia.response.json().count).not.to.exist;
      });


      insomnia.test('Validate no token provided', () => {
      	insomnia.expect('No token provided.').to.equal(insomnia.response.json().errors[0]);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_e889d72e11f24e48b240199493c92cbd
    parentId: fld_c004bf75cf544196842043fd5013ea7d
    modified: 1740421367216
    created: 1740411046198
    url: "{{BaseUrl}}/api/company/{{IdCompany}}"
    name: "[BUG 21364 / Carol] Consultar empresa por ID com sucesso"
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      disabled: false
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
    preRequestScript: insomnia.execution.skipRequest()
    metaSortKey: -1740391847394
    isPrivate: false
    pathParameters: []
    afterResponseScript: |
      insomnia.test("Status code is 200", function () {
          insomnia.response.to.have.status(200);
      });

      insomnia.test('Validate user id matches', () => {
        insomnia.expect(insomnia.environment.get("IdCompany")).to.equal(insomnia.response.json()._id);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_c004bf75cf544196842043fd5013ea7d
    parentId: fld_ce24787bc62c40d5a4314e0bdcd34264
    modified: 1740378841748
    created: 1740378841748
    name: Consultar empresa por ID
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367593985.1445
    environmentType: kv
    _type: request_group
  - _id: req_4942af81d6b94601b18380d181371776
    parentId: fld_c004bf75cf544196842043fd5013ea7d
    modified: 1740411369352
    created: 1740410564436
    url: "{{BaseUrl}}/api/company/{{InvalidIdCompany}}"
    name: Consultar empresa por ID incorreto
    description: ""
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication:
      type: apikey
      disabled: false
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
    metaSortKey: -1740391847294
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test("Status code is 400", function () {
          insomnia.response.to.have.status(400);
      });


      insomnia.test('Validate company does not exist', () => {
      	insomnia.expect('Essa companhia não existe em nosso sistema.').contains(insomnia.response.json().alert);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_86fdc24090904cdaa3fbff875243e961
    parentId: fld_215ebf8d3f8b47a1b0b0a8317a99f7b2
    modified: 1740421734028
    created: 1740410821286
    url: "{{BaseUrl}}/api/company/status/{{IdCompany}}"
    name: "[BUG 21955 / Tadeu] Editar status de uma empresa para false"
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
          "status": false
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      disabled: false
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
    preRequestScript: insomnia.execution.skipRequest()
    metaSortKey: -1740411549036
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test("Status code should be 200 but is 201", function () {
          insomnia.response.to.have.status(201);
      });


      insomnia.test('Validate company status is false', () => {
      	insomnia.expect(insomnia.response.json().updateCompany.status).to.equal(false);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_215ebf8d3f8b47a1b0b0a8317a99f7b2
    parentId: fld_ce24787bc62c40d5a4314e0bdcd34264
    modified: 1740378860131
    created: 1740378860131
    name: Atualizar o Status da Empresa
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367593722.0723
    environmentType: kv
    _type: request_group
  - _id: req_62eb38802c64469a9d160805ec72c561
    parentId: fld_215ebf8d3f8b47a1b0b0a8317a99f7b2
    modified: 1740421738739
    created: 1740412582744
    url: "{{BaseUrl}}/api/company/status/{{IdCompany}}"
    name: "[BUG 21957 / Tadeu] Editar status de uma empresa para true"
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
          "status": true
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      disabled: false
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
    preRequestScript: insomnia.execution.skipRequest()
    metaSortKey: -1740401698215
    isPrivate: false
    pathParameters: []
    afterResponseScript: >-
      insomnia.test("Status code should be 200 but is 201", function () {
          insomnia.response.to.have.status(201);
      });


      insomnia.test('Validate company status is false', () => {
      	insomnia.expect(insomnia.response.json().updateCompany.status).to.equal(true);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_725e74677d934923af3c5a107bef5f78
    parentId: fld_1a993ad112bc46578b0ecb812e655da2
    modified: 1740412848126
    created: 1740412726011
    url: "{{BaseUrl}}/api/company/{{IdCompany}}"
    name: Excluir Cadastro de Empresa com Sucesso
    description: ""
    method: DELETE
    body:
      mimeType: application/json
      text: ""
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      disabled: false
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
    metaSortKey: -1740412728652
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test("Status code is 200", function () {
          insomnia.response.to.have.status(200);
      });


      insomnia.test('Validate company deletion', () => {
      	insomnia.expect('Companhia deletado com sucesso.').to.equal(insomnia.response.json().msg);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_1a993ad112bc46578b0ecb812e655da2
    parentId: fld_ce24787bc62c40d5a4314e0bdcd34264
    modified: 1740378879706
    created: 1740378879706
    name: Excluir Cadastro de Empresa
    description: ""
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1740367593590.5361
    environmentType: kv
    _type: request_group
  - _id: req_e59260ca8fba4aa0835bfc6fd7f64ea8
    parentId: fld_1a993ad112bc46578b0ecb812e655da2
    modified: 1740412936649
    created: 1740412878645
    url: "{{BaseUrl}}/api/company/{{InvalidIdCompany}}"
    name: Cadastro de Empresa com ID Inválido
    description: ""
    method: DELETE
    body:
      mimeType: application/json
      text: ""
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication:
      type: apikey
      disabled: false
      key: Authorization
      value: "{{TokenUser}}"
      addTo: header
    metaSortKey: -1740412138844
    isPrivate: false
    pathParameters: []
    afterResponseScript: >
      insomnia.test("Status code is 404", function () {
          insomnia.response.to.have.status(404);
      });


      insomnia.test('Validate company deletion', () => {
      	insomnia.expect('Essa companhia não existem em nossa base de dados.').to.equal(insomnia.response.json().msg);
      });
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: env_8300158531f04d97b80bd3c8221f7bc7
    parentId: wrk_1c417c13210e42d1b4da6345a53e6534
    modified: 1742011678437
    created: 1740367631053
    name: Base Environment
    data:
      Cpf: "70830559501"
      Cnpj: "42803492327958"
      TooLongString: hchDxAvboEYqH3Cwb71F7wk9Ztd9170HKNqP8XVDnicmEcFtCXV4G5gSD5dEFvUugE1DqPjevgc0QJIzxdmxRI9YrWWTrR8tbbOVG
      randomZipCode: "44555714"
      randomCity: Denver
      randomState: RJ
      randomDistrict: Brookside
      randomStreet: High Street
      randomPhoneNumber: (418) 601-6183
      randomAddressComplement: Block C
      randomCountry: Netherlands
      randomNumber: 779989505
      BaseUrl: https://quality-eagles.qacoders.dev.br
      TokenAdm: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWU0MGU1YTAwMTU2MzRmMTM3ZTYiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCRqcGFsRGFZUlYuQlpTVndqM0xPYS8uQ2FxWC9CTVFzelFmNDdDZmp6dWJBTzVrRXA2anA2SyIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjU1OjQ0IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVlNDBlNWEwMDE1NjM0ZjEzN2U3In1dLCJfX3YiOjAsImlhdCI6MTc0MjAxMTYyNCwiZXhwIjoxNzQyMDk4MDI0fQ.NV5nwX_I9QcMqctE-f7ZYhBZNIVNRJvaN2dXsZPxydg
      MailAdm: sysadmin@qacoders.com
      PasswordAdm: 1234@Test
      InvalidMail: xxxxx@yyyyy
      InvalidPassword: 1234@xxx
      TokenUser: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Q0ZmNlODExZDVmZjc2MjkyMjEyNTkiLCJmdWxsTmFtZSI6IkVsaXphYmV0aCBEYXZpcyIsIm1haWwiOiJlbGl6YWJldGhkYXZpc0BxYWNvZGVycy5jb20uYnIiLCJwYXNzd29yZCI6IiQyYiQxMCRKMHVKSVg0VnYxc1NwaHUzNjdYOU1PTjFXbUJDTDBlUjVybFpsODhUTnlXTjF3c3dGRVJTbSIsImFjY2Vzc1Byb2ZpbGUiOiJBRE1JTiIsImNwZiI6IjcwODMwNTU5NTAxIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjY2ZGI1ZTQwZTVhMDAxNTYzNGYxMzdlNiIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic8OhYmFkbywgMTUvMDMvMjAyNSwgMDE6MDc6MDQgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtNTkzMCIsIl9pZCI6IjY3ZDRmY2U4MTFkNWZmNzYyOTIyMTI1YSJ9XSwiX192IjowLCJpYXQiOjE3NDIwMTE2MjQsImV4cCI6MTc0MjA5ODAyNH0.m9qakeTa5AtXz0f1v20oPQDhEIBTZj5RXAclxk9WRwk
      FirstName: Elizabeth
      LastName: Davis
      FullName: Elizabeth Davis
      MailUser: elizabethdavis@qacoders.com.br
      PasswordUser: "%Th2l$0%pb$M"
      idUser: 67bbfcc011d5ff762943fe7a
      TokenInvalid: ""
      TokenBlank: ""
      RegisterCompany: ""
      IdUser: 67d4fce811d5ff7629221259
      InvalidToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2JjMDEzOTExZDVmZjc2Mjk0M2ZlYzgiLCJmdWxsTmFtZSI6IkxpbmRhIEFuZGVyc29uIiwibWFpbCI6ImxpbmRhYW5kZXJzb25AcWFjb2RlcnMuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkempPWklhRzhjQ215N2FCTGY4eDVFdXdYdThHN1ZWM1RwUGhZUmtsQjRZczZmckRkRG1Wc3UiLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiI5MjQzNTQxMjUyOSIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWU0MGU1YTAwMTU2MzRmMTM3ZTYiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InNlZ3VuZGEtZmVpcmEsIDI0LzAyLzIwMjUsIDAyOjE4OjQ5IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IlFhQ29kZXJzLTEyMjkiLCJfaWQiOiI2N2JjMDEzOTExZDVmZjc2Mjk0M2ZlYzkifV0sIl9fdiI6MCwiaWF0IjoxNzQwMzc1NzY2LCJleHAiOjE3NDA0NjIxNjZ9.liNcS79ZzWUSJsslTfU1Wojk_B0fsCpc0shIxXWoxxx
      InvalidIdUser: 67bc013911d5ff762943fabc
      IdCompany: 67d4fcec11d5ff762922347d
      InvalidIdCompany: 67bc1e4811d5ff762944229d
    dataPropertyOrder:
      "&":
        - Cpf
        - Cnpj
        - TooLongString
        - randomZipCode
        - randomCity
        - randomState
        - randomDistrict
        - randomStreet
        - randomPhoneNumber
        - randomAddressComplement
        - randomCountry
        - randomNumber
        - BaseUrl
        - TokenAdm
        - MailAdm
        - PasswordAdm
        - InvalidMail
        - InvalidPassword
        - TokenUser
        - FirstName
        - LastName
        - FullName
        - MailUser
        - PasswordUser
        - idUser
        - TokenInvalid
        - TokenBlank
        - RegisterCompany
        - IdUser
        - InvalidToken
        - InvalidIdUser
        - IdCompany
        - InvalidIdCompany
    color: null
    isPrivate: false
    metaSortKey: 1740367631053
    environmentType: json
    kvPairData: []
    _type: environment
  - _id: jar_957e08c915574146b868e571f00065f3
    parentId: wrk_1c417c13210e42d1b4da6345a53e6534
    modified: 1742011678436
    created: 1740367631056
    name: Default Jar
    cookies: []
    _type: cookie_jar
